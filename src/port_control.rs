use packed_struct::prelude::*;

use crate::{registers::Registers, RegisterAddress};

#[derive(PrimitiveEnum, Clone, Copy, PartialEq, Debug, Default)]
pub enum AudioFormat {
    #[default]
    LeftJustified24bit = 0b000,
    LeftJustifiedI2S = 0b001,
    RightJustified16bit = 0b100,
    RightJustified18bit = 0b101,
    RightJustified20bit = 0b110,
    RightJustified24bit = 0b111,
}

#[derive(PrimitiveEnum, Clone, Copy, PartialEq, Debug, Default)]
pub enum OutputDataSource {
    #[default]
    Loopback = 0b00,
    OtherPort = 0b01,
    DIR = 0b10,
    SRC = 0b11,
}

#[derive(PrimitiveEnum, Clone, Copy, PartialEq, Debug, Default)]
pub enum PortMasterClockDivider {
    #[default]
    _128 = 0b00,
    _256 = 0b01,
    _384 = 0b10,
    _512 = 0b11,
}
#[derive(PrimitiveEnum, Clone, Copy, PartialEq, Debug, Default)]
pub enum PortClockSource {
    #[default]
    Mclk = 0b00,
    Rxcki = 0b01,
    Rxcko = 0b10,
}

#[derive(Debug, Default, PackedStruct)]
#[packed_struct(bit_numbering = "msb0", endian = "lsb")]
pub struct PortAControl1Register {
    #[packed_field(bits = "0..3", ty = "enum")]
    pub afmt: AudioFormat,
    /// This bit is used to set the audio clock mode for Port A to either Slave or Master.
    ///
    /// false: Slave mode; the LRCK and BCK clocks are inputs generated by an external digital
    /// audio source. (Default)
    /// true: Master mode; the LRCK and BCK clocks are outputs, derived from the Port A
    /// master clock source.
    #[packed_field(bits = "3")]
    pub am_slave: bool,
    #[packed_field(bits = "4..6", ty = "enum")]
    pub aout: OutputDataSource,
    #[packed_field(bits = "6")]
    pub amute: bool,
    #[packed_field(bits = "7")]
    pub _reserved: ReservedZero<packed_bits::Bits<1>>,
}

impl PortAControl1Register {
    pub const REGISTER_ADDRESS: Registers = Registers::PortAControl;
}

impl RegisterAddress for PortAControl1Register {
    fn register_address() -> crate::registers::Registers {
        Self::REGISTER_ADDRESS
    }
}

#[derive(Debug, Default, PackedStruct)]
#[packed_struct(bit_numbering = "msb0", endian = "lsb")]
pub struct PortAControl2Register {
    #[packed_field(bits = "0..2", ty = "enum")]
    pub adiv: PortMasterClockDivider,
    #[packed_field(bits = "2..4", ty = "enum")]
    pub aclk: PortClockSource,
    #[packed_field(bits = "4..7")]
    pub _reserved: ReservedZeroes<packed_bits::Bits<4>>,
}
impl PortAControl2Register {
    pub const REGISTER_ADDRESS: Registers = Registers::PortAControl2;
}

impl RegisterAddress for PortAControl2Register {
    fn register_address() -> crate::registers::Registers {
        Self::REGISTER_ADDRESS
    }
}

#[derive(Debug, Default, PackedStruct)]
#[packed_struct(bit_numbering = "msb0", endian = "lsb")]
pub struct PortBControl1Register {
    #[packed_field(bits = "0..3", ty = "enum")]
    pub afmt: AudioFormat,
    /// This bit is used to set the audio clock mode for Port B to either Slave or Master.
    ///
    /// false: Slave mode; the LRCK and BCK clocks are inputs generated by an external digital
    /// audio source. (Default)
    /// true: Master mode; the LRCK and BCK clocks are outputs, derived from the Port B
    /// master clock source.
    #[packed_field(bits = "3")]
    pub am_slave: bool,
    #[packed_field(bits = "4..6", ty = "enum")]
    pub aout: OutputDataSource,
    #[packed_field(bits = "6")]
    pub amute: bool,
    #[packed_field(bits = "7")]
    pub _reserved: ReservedZero<packed_bits::Bits<1>>,
}
impl PortBControl1Register {
    pub const REGISTER_ADDRESS: Registers = Registers::PortBControl;
}

impl RegisterAddress for PortBControl1Register {
    fn register_address() -> crate::registers::Registers {
        Self::REGISTER_ADDRESS
    }
}

#[derive(Debug, Default, PackedStruct)]
#[packed_struct(bit_numbering = "msb0", endian = "lsb")]
pub struct PortBControl2Register {
    #[packed_field(bits = "0..2", ty = "enum")]
    pub adiv: PortMasterClockDivider,
    #[packed_field(bits = "2..4", ty = "enum")]
    pub aclk: PortClockSource,
    #[packed_field(bits = "4..7")]
    pub _reserved: ReservedZeroes<packed_bits::Bits<4>>,
}
impl PortBControl2Register {
    pub const REGISTER_ADDRESS: Registers = Registers::PortBControl2;
}

impl RegisterAddress for PortBControl2Register {
    fn register_address() -> crate::registers::Registers {
        Self::REGISTER_ADDRESS
    }
}
